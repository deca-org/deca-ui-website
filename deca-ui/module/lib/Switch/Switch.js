import { ThemeContext } from '../Theme';
import { uuid, __DEV__, } from '../Utils';
import clsx from 'clsx';
import React, { useState, useMemo } from 'react';
import { StyledSwitchWrapper, StyledSwitchInput, StyledSwitchLabel, } from './Switch.styles';
const Switch = React.forwardRef(({ size = 'md', label, className, disabled = false, as, css, color = 'primary', required = false, toggled, initialToggle = false, onChange, name, value, }, ref) => {
    const [selfToggled, setSelfToggled] = useState(initialToggle);
    const switchId = uuid('switch');
    const isControlledComponent = useMemo(() => toggled !== undefined, [toggled]);
    const changeHandler = (e) => {
        if (disabled)
            return;
        if (!isControlledComponent) {
            setSelfToggled(e.target.checked);
        }
        onChange && onChange(e);
    };
    const preClass = 'decaSwitch';
    const { dark } = React.useContext(ThemeContext);
    return (React.createElement(StyledSwitchWrapper, { className: clsx(className, `${preClass}-root`) },
        React.createElement(StyledSwitchInput, { id: switchId, type: "checkbox", onChange: changeHandler, checked: isControlledComponent ? toggled : selfToggled, ref: ref, isDisabled: disabled, name: name, size: size, className: `${preClass}-input`, disabled: disabled, color: color, required: required, value: value, isDark: dark }),
        React.createElement(StyledSwitchLabel, { htmlFor: switchId, css: css, size: size, as: as, color: color, isDisabled: disabled, hasLabel: label ? true : false, isDark: dark }, label && label)));
});
if (__DEV__) {
    Switch.displayName = 'DecaUI.Switch';
}
export default Switch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3dpdGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9Td2l0Y2gvU3dpdGNoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTFDLE9BQU8sRUFJTCxJQUFJLEVBQ0osT0FBTyxHQUNSLE1BQU0sWUFBWSxDQUFDO0FBQ3BCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFakQsT0FBTyxFQUNMLG1CQUFtQixFQUNuQixpQkFBaUIsRUFDakIsaUJBQWlCLEdBQ2xCLE1BQU0saUJBQWlCLENBQUM7QUFpRnpCLE1BQU0sTUFBTSxHQUFvQixLQUFLLENBQUMsVUFBVSxDQUM5QyxDQUNFLEVBQ0UsSUFBSSxHQUFHLElBQUksRUFDWCxLQUFLLEVBQ0wsU0FBUyxFQUNULFFBQVEsR0FBRyxLQUFLLEVBQ2hCLEVBQUUsRUFDRixHQUFHLEVBQ0gsS0FBSyxHQUFHLFNBQVMsRUFDakIsUUFBUSxHQUFHLEtBQUssRUFDaEIsT0FBTyxFQUNQLGFBQWEsR0FBRyxLQUFLLEVBQ3JCLFFBQVEsRUFDUixJQUFJLEVBQ0osS0FBSyxHQUNVLEVBQ2pCLEdBQXVCLEVBQ3ZCLEVBQUU7SUFDRixNQUFNLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxHQUFHLFFBQVEsQ0FBVSxhQUFhLENBQUMsQ0FBQztJQUV2RSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFaEMsTUFBTSxxQkFBcUIsR0FBRyxPQUFPLENBQ25DLEdBQUcsRUFBRSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQzNCLENBQUMsT0FBTyxDQUFDLENBQ1YsQ0FBQztJQUVGLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBc0MsRUFBRSxFQUFFO1FBQy9ELElBQUksUUFBUTtZQUFFLE9BQU87UUFDckIsSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzFCLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2xDO1FBQ0QsUUFBUSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQUM7SUFFRixNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUM7SUFFOUIsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFaEQsT0FBTyxDQUNMLG9CQUFDLG1CQUFtQixJQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsUUFBUSxPQUFPLENBQUM7UUFDakUsb0JBQUMsaUJBQWlCLElBQ2hCLEVBQUUsRUFBRSxRQUFRLEVBQ1osSUFBSSxFQUFDLFVBQVUsRUFDZixRQUFRLEVBQUUsYUFBYSxFQUN2QixPQUFPLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUN0RCxHQUFHLEVBQUUsR0FBRyxFQUNSLFVBQVUsRUFBRSxRQUFRLEVBQ3BCLElBQUksRUFBRSxJQUFJLEVBQ1YsSUFBSSxFQUFFLElBQUksRUFDVixTQUFTLEVBQUUsR0FBRyxRQUFRLFFBQVEsRUFDOUIsUUFBUSxFQUFFLFFBQVEsRUFDbEIsS0FBSyxFQUFFLEtBQUssRUFDWixRQUFRLEVBQUUsUUFBUSxFQUNsQixLQUFLLEVBQUUsS0FBSyxFQUNaLE1BQU0sRUFBRSxJQUFJLEdBQ1o7UUFDRixvQkFBQyxpQkFBaUIsSUFDaEIsT0FBTyxFQUFFLFFBQVEsRUFDakIsR0FBRyxFQUFFLEdBQUcsRUFDUixJQUFJLEVBQUUsSUFBSSxFQUNWLEVBQUUsRUFBRSxFQUFTLEVBQ2IsS0FBSyxFQUFFLEtBQUssRUFDWixVQUFVLEVBQUUsUUFBUSxFQUNwQixRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFDOUIsTUFBTSxFQUFFLElBQUksSUFFWCxLQUFLLElBQUksS0FBSyxDQUNHLENBQ0EsQ0FDdkIsQ0FBQztBQUNKLENBQUMsQ0FDRixDQUFDO0FBRUYsSUFBSSxPQUFPLEVBQUU7SUFDWCxNQUFNLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQztDQUN0QztBQUVELGVBQWUsTUFBTSxDQUFDIn0=